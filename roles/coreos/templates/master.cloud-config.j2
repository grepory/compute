{% set comma1 = joiner(",") %}{% set comma2 = joiner(",") %}
#cloud-config
coreos:
  etcd2:
    name: {{item.availability_zone.name}}-master
    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
    advertise-client-urls: http://$private_ipv4:2379,http://$private_ipv4:4001
    initial-advertise-peer-urls: http://$private_ipv4:2380,http://$private_ipv4:7001
    listen-peer-urls: http://$private_ipv4:2380,http://$private_ipv4:7001
    initial-cluster: {% for item in coreos_master_deployment %}{{comma1()}}{{item.availability_zone.name}}-master=http://{{item.private_ip}}:2380,{{item.availability_zone.name}}-master=http://{{item.private_ip}}:7001{% endfor %}

    initial-cluster-state: new
    initial-cluster-token: coreos-{{environment_region}}
    data-dir: /var/lib/etcd2
  units:
    - name: etcd.service
      command: stop
    - name: etcd2.service
      command: start
    - name: docker.service
      command: start
      user: core
    - name: format-etcd-container-volume.service
      command: start
      content: |
        [Unit]
        Description=Format attached ectd container storage.
        After=dev-xvdb.device
        Requires=dev-xvdb.device
        [Service]
        User=root
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/bin/bash -c '/usr/sbin/blkid /dev/xvdb | /usr/bin/grep -i uuid || (/usr/sbin/wipefs -f /dev/xvdb && /usr/sbin/mkfs.ext4 /dev/xvdb)'
    - name: var-lib-etcd2\x2dcontainer.mount
      command: start
      content: |
        [Unit]
        Description=Mount ephemeral storage to /var/lib/etcd2-container
        Requires=format-etcd-container-volume.service
        After=format-etcd-container-volume.service
        Before=docker.service
        [Mount]
        What=/dev/xvdb
        Where=/var/lib/etcd2-container
        Type=ext4
    - name: app-etcd2.service
      command: start
      content: |
        [Unit]
        Description=etcd2 container for app use
        After=docker.service
        Requires=docker.service
        [Service]
        User=core
        Restart=always
        EnvironmentFile=/etc/environment
        ExecStartPre=-/usr/bin/docker stop -t 2 app-etcd2
        ExecStartPre=-/usr/bin/docker rm app-etcd2
        ExecStartPre=/usr/bin/docker pull quay.io/coreos/etcd:latest
        ExecStart=/usr/bin/docker run --volume=/var/lib/etcd2-container:/var/lib/etcd2 -p 4101:4101 -p 2480:2480 -p 2479:2479 --name=app-etcd2 quay.io/coreos/etcd:latest -name app-etcd-{{environment}}-{{item.availability_zone.name}} -listen-client-urls http://0.0.0.0:2479,http://0.0.0.0:4101 -advertise-client-urls http://$private_ipv4:2479,http://$private_ipv4:4101 -initial-advertise-peer-urls http://$private_ipv4:2480 -listen-peer-urls http://0.0.0.0:2480 -initial-cluster {% for item in coreos_master_deployment %}{{comma2()}}app-etcd-{{environment}}-{{item.availability_zone.name}}=http://{{item.private_ip}}:2480{% endfor %} -initial-cluster-state new -initial-cluster-token app-etcd2-{{environment_region}} -data-dir /var/lib/etcd2
        ExecStop=/usr/bin/docker stop -t 2 app-etcd2
    - name: app-etcd2-elb.service
      command: start
      content: |
        [Unit]
        Description=app-etcd2 ELB Registration
        After=docker.service
        Requires=docker.service
        PartOf=app-etcd2.service
        [Service]
        User=core
        Restart=always
        TimeoutStartSec=0
        ExecStartPre=-/usr/bin/docker stop -t 5 app-etcd2-elb
        ExecStartPre=-/usr/bin/docker rm app-etcd2-elb
        ExecStartPre=/usr/bin/docker pull quay.io/coreos/elb-presence:latest
        ExecStart=/usr/bin/docker run --rm --name app-etcd2-elb -e AWS_REGION={{region}} -e ELB_NAME=etcd quay.io/coreos/elb-presence
        ExecStop=/usr/bin/docker stop -t 5 app-etcd2-elb
    - name: cadvisor.service
      command: start
      content: |
        [Unit]
        Description=cAdvisor
        After=docker.service
        Requires=docker.service
        [Service]
        User=core
        Restart=always
        EnvironmentFile=/etc/environment
        ExecStartPre=-/usr/bin/docker stop -t 2 cadvisor
        ExecStartPre=-/usr/bin/docker rm cadvisor
        ExecStartPre=/usr/bin/docker pull google/cadvisor
        ExecStart=/usr/bin/docker run --volume=/:/rootfs:ro --volume=/var/run:/var/run:rw --volume=/sys:/sys:ro --volume=/var/lib/docker/:/var/lib/docker:ro --publish=10888:8080 --name=cadvisor google/cadvisor:latest
        ExecStop=/usr/bin/docker stop -t 2 cadvisor
    - name: docker-cleanup.service
      command: start
      content: |
        [Unit]
        Description=Docker Cleanup Service
        Requires=docker.service
        After=docker.service
        [Service]
        Type=oneshot
        ExecStart=/bin/bash -c "/usr/bin/docker ps -aqf status=exited | /usr/bin/xargs /usr/bin/docker rm || exit 0"
        ExecStart=/bin/bash -c "/usr/bin/docker images -q | /usr/bin/xargs /usr/bin/docker rmi || exit 0"
    - name: docker-cleanup.timer
      command: start
      content: |
        [Unit]
        Description=Docker Cleanup Timer
        Requires=docker.service
        After=docker.service
        [Timer]
        OnBootSec=2m
        OnUnitInactiveSec=1h
        Unit=docker-cleanup.service
    - name: registrator.service
      command: start
      content: |
        [Unit]
        Description=Registrator
        After=etcd2.service docker.service
        Requires=etcd2.service docker.service
        [Service]
        User=core
        Restart=always
        EnvironmentFile=/etc/environment
        ExecStartPre=-/usr/bin/docker kill registrator
        ExecStartPre=-/usr/bin/docker rm registrator
        ExecStartPre=/usr/bin/docker pull gliderlabs/registrator
        ExecStart=/usr/bin/docker run --volume /var/run/docker.sock:/tmp/docker.sock --hostname %H --add-host host:$private_ipv4 --name registrator gliderlabs/registrator -ip $private_ipv4 etcd://host:2379/opsee.co/registrator
        ExecStop=/usr/bin/docker stop registrator
    - name: logspout.service
      command: start
      content: |
        [Unit]
        Description=Logging for containers
        After=docker.service
        Requires=docker.service
        [Service]
        Restart=always
        EnvironmentFile=/etc/environment
        ExecStartPre=-/usr/bin/docker kill logspout
        ExecStartPre=-/usr/bin/docker rm logspout
        ExecStartPre=/usr/bin/docker pull gliderlabs/logspout:latest
        ExecStart=/usr/bin/docker run --name logspout -v /var/run/docker.sock:/tmp/docker.sock gliderlabs/logspout syslog://logs3.papertrailapp.com:51722
        ExecStop=/usr/bin/docker stop logspout
  
  update:
    group: stable
    reboot-strategy: etcd-lock
write_files:
  - path: /opt/etc/environment
    permissions: 0644
    owner: root
    content: |
      ETCD_HOST=$private_ipv4
      ETCD_PORT=2379
  - path: /home/core/.dockercfg
    permissions: 0600
    owner: core
    content: |
      {
          "quay.io": {
                  "auth": "b3BzZWUrb3BzZWVjaTpGNFE2RlJWMVpaT1FWV0hHVDNIU0gzSVlKOEFJOUYxUk5RWVVLTFFKUVpKVUU3MTFWSjZSSUJBVlg4VkJLV1lI",
                  "email": "ci@opsee.co"
          }
      }
